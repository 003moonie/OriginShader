#version 300 es
#pragma optimize(on)
precision highp float;

#include "fragmentVersionCentroid.h"

#include "shaderfunction.lin"

#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
			_centroid in highp vec2 uv0;
			_centroid in highp vec2 uv1;
		#else
			_centroid in vec2 uv0;
			_centroid in vec2 uv1;
		#endif
	#endif
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif

#ifndef BYPASS_PIXEL_SHADER
	flat varying vec3 campos;
	flat varying vec3 clocampos;

	flat varying vec3 orisunlig;
	flat varying vec3 sunlig;
	flat varying vec3 sunvec;

	flat varying vec3 closunlig;
	flat varying vec3 closkylum;

	varying vec3 envlig;

	varying vec4 col;
	varying vec4 varcol;

	varying vec3 outsca;
	varying vec3 insca;

	varying vec4 worpos;
	varying vec4 chupos;
#endif

#include "uniformShaderConstants.h"
#include "uniformPerFrameConstants.h"
#include "util.h"

LAYOUT_BINDING(3) uniform sampler2D TEXTURE_0;
LAYOUT_BINDING(4) uniform sampler2D TEXTURE_1;
LAYOUT_BINDING(5) uniform sampler2D TEXTURE_2;

void main()
{
#ifdef BYPASS_PIXEL_SHADER
	return;
#else 

#ifdef SEASONS
	bool seasons = true;
#else
	bool seasons = false;
#endif

#ifdef BLEND
	bool blend = true;
#else 
	bool blend = false;
#endif

	vec2 ddxuv0 = dFdx(uv0);
	vec2 ddyuv0 = dFdy(uv0);
	vec4 ddxpos = dFdx(chupos);
	vec4 ddypos = dFdy(chupos);

	vec3 wornor = normalize(cross(ddxpos.xyz, ddypos.xyz));
	mat3 invTBN = getinvTBN(ddxuv0, ddyuv0, ddxpos, ddypos, wornor);

#if USE_TEXEL_AA
	vec4 texcol = texture2D_AA(TEXTURE_0, uv0);
#else
	vec4 texcol = texture2D(TEXTURE_0, uv0);
#endif

#if USE_ALPHA_TEST && !defined(SEASONS_FAR)
#ifdef ALPHA_TO_COVERAGE
	#define ALPHA_THRESHOLD 0.05
#else
	#define ALPHA_THRESHOLD 0.50
#endif
	if(texcol.a < ALPHA_THRESHOLD)
		discard;
#endif

#ifdef SEASONS
	vec4 varCol = vec4(mix(vec3(1.0), texture2D(TEXTURE_2, col.xy).rgb * 2.0, col.b), col.a);
#else
	vec4 varCol = varcol;
#endif

	vec4 outcol = vec4(0.5, 0.5, 0.5, 1.0);

	vec3 worvec = normalize(worpos.xyz);
	vec3 worvie = -worvec;
	vec3 worhal = normalize(worvie + sunvec);

	vec3 poilig = getpoilig(uv1);

	texcol.rgb = gamma2line(texcol.rgb * varCol.rgb);

	if (col.b == 0.0) //redstone_wire
	{
		outcol.rgb = texcol.rgb * col.rgb;
		outcol.a = texcol.a;
	}
	else if (seasons || col.a < 0.001) //leaves
	{
		const float roughness = ROUGHNESS;

		vec3 envdif = texcol.rgb * envlig;
		vec3 poidif = Diffuse_Lambert(texcol.rgb) * poilig;
		vec3 sunref = Microfacet_BRDF(texcol.rgb, vec3(F0), roughness, wornor, worvie, sunvec) * (sunlig * getshadow(uv1, varCol)) * max(dot(wornor, sunvec),0.0);
	
		vec3 mixlig = poidif + sunref + envdif;
		mixlig = mixlig * outsca + orisunlig * insca;
		outcol.rgb = lig2col(mixlig);
		outcol.a = texcol.a;
	}
	else if (blend ? abs(col.r - col.b) > 0.001 : col.a < 0.999) //water
	{
		vec3 watnor = vec3(0.0, 0.0, 1.0);
		watnor = invTBN * watnor;

	#if !USE_WATER_TEXTURE
		texcol.rgb = gamma2line(col.rgb);
	#endif

	#if 0
		vec3 skyvec = worpos.y < 0.0 ? reflect(worvec, watnor) : refract(worvec, watnor, 1.333); //lagggggg
	#else
		vec3 skyvec = reflect(worvec, watnor);
	#endif
		vec3 envdif = texcol.rgb * envlig;
		vec3 skyref = F_Fresnel(vec3(F0_WATER), dot(worvie, watnor)) * skyrender(campos, skyvec, orisunlig, closunlig, closkylum, sunvec, gl_FragCoord, TIME);
		vec3 mixref = mix(envdif, skyref, uv1.y);
		vec3 poidif = (1.0 / (4.0 * MATH_PI)) * texcol.rgb * poilig;
		vec3 sunref = (1.0 / (4.0 * MATH_PI)) * texcol.rgb * (sunlig * getshadow(uv1, varCol));

		vec3 mixlig = poidif + sunref + mixref; //没法物理正确，差不多就这样吧
		outcol.a = line2gamma(F0_WATER) + line2gamma(col2lum(mixref)); //要进行一次blend，用.a而不是.rgb控制反射的强度
		mixlig = mixlig * outsca + orisunlig * insca;
		outcol.rgb = lig2col(mixlig);
	}
	else
	{
#if USE_ALPHA_TEST //tallgrass
		const float roughness = ROUGHNESS;

		vec3 envdif = texcol.rgb * envlig;
		vec3 poidif = Diffuse_Lambert(texcol.rgb) * poilig;
		vec3 sunref = Microfacet_BRDF(texcol.rgb, vec3(F0), roughness, wornor, worvie, sunvec) * (sunlig * getshadow(uv1, varCol)) * max(dot(wornor, sunvec),0.0);
	
		vec3 mixlig = poidif + sunref + envdif;

		mixlig = mixlig * outsca + orisunlig * insca;
		outcol.rgb = lig2col(mixlig);
		outcol.a = texcol.a;

#elif defined(BLEND) //transparent
		const float roughness = 0.0;

		vec3 tranor = vec3(0.0, 0.0, 1.0);
		tranor = invTBN * tranor;
		vec3 skyvec = reflect(worvec, tranor);

		vec3 envdif = texcol.rgb * envlig;
		vec3 skyref = F_Fresnel(vec3(F0_GLASS), dot(worvie, tranor)) * skyrender(campos, skyvec, orisunlig, closunlig, closkylum, sunvec, gl_FragCoord, TIME);
		vec3 mixref = mix(envdif, skyref, uv1.y);
		vec3 poidif = (1.0 / (4.0 * MATH_PI)) * texcol.rgb * poilig;
		vec3 sunref = (1.0 / (4.0 * MATH_PI)) * texcol.rgb * (sunlig * getshadow(uv1, varCol));
	
		vec3 mixlig = poidif + sunref + mixref; //没法物理正确，差不多就这样吧
		outcol.a = texcol.a + line2gamma(col2lum(mixref)); //要进行一次blend，用.a而不是.rgb控制反射的强度
		mixlig = mixlig * outsca + orisunlig * insca;
		outcol.rgb = lig2col(mixlig);

#else //default
		const float roughness = ROUGHNESS;

		vec3 envdif = texcol.rgb * envlig;
		vec3 poidif = Diffuse_Lambert(texcol.rgb) * poilig;
		vec3 sunref = Microfacet_BRDF(texcol.rgb, vec3(F0), roughness, wornor, worvie, sunvec) * (sunlig * getshadow(uv1, varCol)) * max(dot(wornor, sunvec),0.0);
	
		vec3 mixlig = poidif + sunref + envdif;
	
		mixlig = mixlig * outsca + orisunlig * insca;
		outcol.rgb = lig2col(mixlig);
		outcol.a = texcol.a;

#endif

	}
	
	gl_FragColor = outcol;

#endif
}
